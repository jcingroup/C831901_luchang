@charset "UTF-8";

//
// == 單位
// -----------------------------------------------------------------
// 去單位
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// px換算至em
@function em($px, $context: $font-size-base) {
    @if unit($px) == em {
        @return $px;
    }
    @else {
        $context: if(unitless($context), $context * 1px, $context);
        $px: if(unitless($px), $px * 1px, $px);

        @return $px / $context * 1em;
    }
}

// px to rem
@function rem($px, $base: $font-size-base) {

    // 無單位時
    @if unitless($px) {
        @return ($px / strip-unit($base)) + rem;
    }
    @else {
        // 單位 = px時
        @if unit($px) == 'px' {
            @return (strip-unit($px) / strip-unit($base)) + rem;
        }
        @else if unit($px) == 'rem' {
            @return $px;
        }
    }
}

// == math
// -----------------------------------------------------------------
// 算平方
@function pow($number, $exp) {
    $value: 1;

    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }
    @return $value;
}

// == z-index
// -----------------------------------------------------------------
@function z($value) {
    @return map-get($z-index, $value);
}


//
// == 顏色
// -----------------------------------------------------------------
// 取得組合色
@function color($value: "primary") {
    @if map-has-key($colors, $value) {
        @return map-get($colors, $value);
    }
    @return null;
}

// 漸淡色
// color: tint(#BADA55, 42%);
@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}

// 漸濃色
// background-color: shade(#663399, 42%);
@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}

// 取顏色的亮度
// luma(#fff) => 1
// luma(#000) => 0
@function luma($color) {
    $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));

    @each $name, $value in $color-rgb {
        $adjusted: 0;
        $value: $value / 255;
        @if $value < 0.03928 {
            $value: $value / 12.92;;
        }
        @else {
            $value: ($value + .055) / 1.055;
            $value: pow($value, 2);
        }
        $color-rgb: map-merge($color-rgb, ($name: $value));
    }

    @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}

//  反轉色
@function contract($color, $base:light, $deg: 50) {
    // 亮度
    $lumin: .65;

    @if $base == 'light' and luma($color) < $lumin {
        @return tint($color, $deg);
    }
    @else if $base == 'dark' and luma($color) > $lumin {
        @return shade($color, $deg);
    }
    @else {
        @return $color;
    }
}

//
// == 四捨五入幾位數
// -----------------------------------------------------------------
// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    }
    @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }

    @for $i from 1 through $digits {
        $n: $n * 10;
    }

    @if $mode == round {
        @return round($number * $n) / $n;
    }
    @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    }
    @else if $mode == floor {
        @return floor($number * $n) / $n;
    }
    @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

//
// == 取代變數
// -----------------------------------------------------------------
// Replace `$search` with `$replace` in `$string`
//
// @author Hugo Giraudel src: https://css-tricks.com/snippets/sass/str-replace-function/
// 使用方法:
// .selector {
//   $string: 'The answer to life the universe and everything is 42.';
//   content: str-replace($string, 'e', 'xoxo');
// }
// str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$custom-select-indicator-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E"), "#", "%23") !default;
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

//
// == 取得多層次map的值
// -----------------------------------------------------------------
@function map-get-deep($map, $keys...) {
    @if length($keys) == 1 {
        $keys: nth($keys, 1);
    }
    $warn: '#{nth($keys, 1)}';
    $length: length($keys);
    $get: map-get($map, nth($keys, 1));

    @if $length > 1 {
        @for $i from 2 through $length {
            @if $get != null and type-of($get) == 'map' {
                $warn: $warn + '->#{nth($keys, $i)}';
                $get: map-get($get, nth($keys, $i));

                @if $get == null {
                    @return map-get-deep-warning($warn, $get, nth($keys, $i));
                }
            }
            @else {
                @return map-get-deep-warning($warn, $get, nth($keys, $i));
            }
        }
    }

    @return $get;
}